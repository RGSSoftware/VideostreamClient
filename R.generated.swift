//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.Software.VideostreamClient") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 9 files.
  struct file {
    /// Resource file `Me.json`.
    static let meJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Me", pathExtension: "json")
    /// Resource file `User.json`.
    static let userJson = Rswift.FileResource(bundle: R.hostingBundle, name: "User", pathExtension: "json")
    /// Resource file `currentUserFollowing.json`.
    static let currentUserFollowingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "currentUserFollowing", pathExtension: "json")
    /// Resource file `isFollowing.json`.
    static let isFollowingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "isFollowing", pathExtension: "json")
    /// Resource file `jsonConfig.json`.
    static let jsonConfigJson = Rswift.FileResource(bundle: R.hostingBundle, name: "jsonConfig", pathExtension: "json")
    /// Resource file `live_Top_x1.json`.
    static let live_Top_x1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "live_Top_x1", pathExtension: "json")
    /// Resource file `live_Top_x2.json`.
    static let live_Top_x2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "live_Top_x2", pathExtension: "json")
    /// Resource file `live_Top_x3.json`.
    static let live_Top_x3Json = Rswift.FileResource(bundle: R.hostingBundle, name: "live_Top_x3", pathExtension: "json")
    /// Resource file `watch_live.json`.
    static let watch_liveJson = Rswift.FileResource(bundle: R.hostingBundle, name: "watch_live", pathExtension: "json")
    
    /// `bundle.url(forResource: "Me", withExtension: "json")`
    static func meJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "User", withExtension: "json")`
    static func userJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "currentUserFollowing", withExtension: "json")`
    static func currentUserFollowingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.currentUserFollowingJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "isFollowing", withExtension: "json")`
    static func isFollowingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.isFollowingJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "jsonConfig", withExtension: "json")`
    static func jsonConfigJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jsonConfigJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "live_Top_x1", withExtension: "json")`
    static func live_Top_x1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.live_Top_x1Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "live_Top_x2", withExtension: "json")`
    static func live_Top_x2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.live_Top_x2Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "live_Top_x3", withExtension: "json")`
    static func live_Top_x3Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.live_Top_x3Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "watch_live", withExtension: "json")`
    static func watch_liveJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.watch_liveJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `detailMenu`.
    static let detailMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "detailMenu")
    /// Image `emailSle`.
    static let emailSle = Rswift.ImageResource(bundle: R.hostingBundle, name: "emailSle")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `fullProfileImageSlec`.
    static let fullProfileImageSlec = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullProfileImageSlec")
    /// Image `fullProfileImage`.
    static let fullProfileImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullProfileImage")
    /// Image `icon-close`.
    static let iconClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-close")
    /// Image `liveImageSlec`.
    static let liveImageSlec = Rswift.ImageResource(bundle: R.hostingBundle, name: "liveImageSlec")
    /// Image `lockSle`.
    static let lockSle = Rswift.ImageResource(bundle: R.hostingBundle, name: "lockSle")
    /// Image `lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `navBackArrowImage`.
    static let navBackArrowImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "navBackArrowImage")
    /// Image `navEULAImage`.
    static let navEULAImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "navEULAImage")
    /// Image `navGoLiveImage`.
    static let navGoLiveImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "navGoLiveImage")
    /// Image `navLogoutImage`.
    static let navLogoutImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "navLogoutImage")
    /// Image `navStreamsImage`.
    static let navStreamsImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "navStreamsImage")
    /// Image `navWatchLiveImage`.
    static let navWatchLiveImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "navWatchLiveImage")
    /// Image `one50x150`.
    static let one50x150 = Rswift.ImageResource(bundle: R.hostingBundle, name: "one50x150")
    /// Image `profilePlaceholderImage`.
    static let profilePlaceholderImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePlaceholderImage")
    /// Image `profileUsernameSle`.
    static let profileUsernameSle = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileUsernameSle")
    /// Image `profileUsername`.
    static let profileUsername = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileUsername")
    /// Image `searchCancelImage`.
    static let searchCancelImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchCancelImage")
    
    /// `UIImage(named: "detailMenu", bundle: ..., traitCollection: ...)`
    static func detailMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emailSle", bundle: ..., traitCollection: ...)`
    static func emailSle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailSle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fullProfileImage", bundle: ..., traitCollection: ...)`
    static func fullProfileImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullProfileImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fullProfileImageSlec", bundle: ..., traitCollection: ...)`
    static func fullProfileImageSlec(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullProfileImageSlec, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-close", bundle: ..., traitCollection: ...)`
    static func iconClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "liveImageSlec", bundle: ..., traitCollection: ...)`
    static func liveImageSlec(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liveImageSlec, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lockSle", bundle: ..., traitCollection: ...)`
    static func lockSle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lockSle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navBackArrowImage", bundle: ..., traitCollection: ...)`
    static func navBackArrowImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navBackArrowImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navEULAImage", bundle: ..., traitCollection: ...)`
    static func navEULAImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navEULAImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navGoLiveImage", bundle: ..., traitCollection: ...)`
    static func navGoLiveImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navGoLiveImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navLogoutImage", bundle: ..., traitCollection: ...)`
    static func navLogoutImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navLogoutImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navStreamsImage", bundle: ..., traitCollection: ...)`
    static func navStreamsImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navStreamsImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navWatchLiveImage", bundle: ..., traitCollection: ...)`
    static func navWatchLiveImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navWatchLiveImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "one50x150", bundle: ..., traitCollection: ...)`
    static func one50x150(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.one50x150, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profilePlaceholderImage", bundle: ..., traitCollection: ...)`
    static func profilePlaceholderImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePlaceholderImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileUsername", bundle: ..., traitCollection: ...)`
    static func profileUsername(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileUsername, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileUsernameSle", bundle: ..., traitCollection: ...)`
    static func profileUsernameSle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileUsernameSle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "searchCancelImage", bundle: ..., traitCollection: ...)`
    static func searchCancelImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchCancelImage, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `NavCell`.
    static let navCell: Rswift.ReuseIdentifier<NavCell> = Rswift.ReuseIdentifier(identifier: "NavCell")
    /// Reuse identifier `ProfileCell`.
    static let profileCell: Rswift.ReuseIdentifier<ProfileSampleCell> = Rswift.ReuseIdentifier(identifier: "ProfileCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `HomeViewController`, and contains static references to 2 segues.
    struct homeViewController {
      /// Segue identifier `to_Broadcaster`.
      static let to_Broadcaster: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, BroadcasterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "to_Broadcaster")
      /// Segue identifier `to_Stream`.
      static let to_Stream: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, AudienceViewController> = Rswift.StoryboardSegueIdentifier(identifier: "to_Stream")
      
      /// Optionally returns a typed version of segue `to_Broadcaster`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func to_Broadcaster(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, BroadcasterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.to_Broadcaster, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `to_Stream`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func to_Stream(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, AudienceViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.to_Stream, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyProfileViewController`, and contains static references to 1 segues.
    struct myProfileViewController {
      /// Segue identifier `from_MyProfile_to_Profile`.
      static let from_MyProfile_to_Profile: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyProfileViewController, ProfileViewController> = Rswift.StoryboardSegueIdentifier(identifier: "from_MyProfile_to_Profile")
      
      /// Optionally returns a typed version of segue `from_MyProfile_to_Profile`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func from_MyProfile_to_Profile(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyProfileViewController, ProfileViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myProfileViewController.from_MyProfile_to_Profile, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SearchViewController`, and contains static references to 2 segues.
    struct searchViewController {
      /// Segue identifier `from_Search_to_Profile`.
      static let from_Search_to_Profile: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchViewController, ProfileViewController> = Rswift.StoryboardSegueIdentifier(identifier: "from_Search_to_Profile")
      /// Segue identifier `from_se`.
      static let from_se: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchViewController, UserListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "from_se")
      
      /// Optionally returns a typed version of segue `from_Search_to_Profile`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func from_Search_to_Profile(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchViewController, ProfileViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchViewController.from_Search_to_Profile, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `from_se`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func from_se(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchViewController, UserListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchViewController.from_se, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SplashViewController`, and contains static references to 1 segues.
    struct splashViewController {
      /// Segue identifier `from_Splash_to_Login`.
      static let from_Splash_to_Login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SplashViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "from_Splash_to_Login")
      
      /// Optionally returns a typed version of segue `from_Splash_to_Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func from_Splash_to_Login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SplashViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.splashViewController.from_Splash_to_Login, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserListViewController`, and contains static references to 2 segues.
    struct userListViewController {
      /// Segue identifier `from_Streams_to_Audience`.
      static let from_Streams_to_Audience: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserListViewController, AudienceViewController> = Rswift.StoryboardSegueIdentifier(identifier: "from_Streams_to_Audience")
      /// Segue identifier `from_Streams_to_Profile`.
      static let from_Streams_to_Profile: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserListViewController, ProfileViewController> = Rswift.StoryboardSegueIdentifier(identifier: "from_Streams_to_Profile")
      
      /// Optionally returns a typed version of segue `from_Streams_to_Audience`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func from_Streams_to_Audience(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserListViewController, AudienceViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userListViewController.from_Streams_to_Audience, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `from_Streams_to_Profile`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func from_Streams_to_Profile(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserListViewController, ProfileViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userListViewController.from_Streams_to_Profile, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashViewController
      
      let audience = StoryboardViewControllerResource<AudienceViewController>(identifier: "audience")
      let broadcaster_Screen = StoryboardViewControllerResource<BroadcasterViewController>(identifier: "Broadcaster_Screen")
      let bundle = R.hostingBundle
      let home_Screen = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Home_Screen")
      let instagramPager_Screen = StoryboardViewControllerResource<WatchPagerViewController>(identifier: "InstagramPager_Screen")
      let left_Nav_Screen = StoryboardViewControllerResource<LeftNavViewController>(identifier: "Left_Nav_Screen")
      let name = "Main"
      let navPager_Screen = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "NavPager_Screen")
      let profile_Nav_Screen = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Profile_Nav_Screen")
      let profile_Screen = StoryboardViewControllerResource<MyProfileViewController>(identifier: "Profile_Screen")
      let search_Nav_Screen = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Search_Nav_Screen")
      let streams_Screen = StoryboardViewControllerResource<UserListViewController>(identifier: "Streams_Screen")
      
      func audience(_: Void = ()) -> AudienceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: audience)
      }
      
      func broadcaster_Screen(_: Void = ()) -> BroadcasterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: broadcaster_Screen)
      }
      
      func home_Screen(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: home_Screen)
      }
      
      func instagramPager_Screen(_: Void = ()) -> WatchPagerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: instagramPager_Screen)
      }
      
      func left_Nav_Screen(_: Void = ()) -> LeftNavViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: left_Nav_Screen)
      }
      
      func navPager_Screen(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navPager_Screen)
      }
      
      func profile_Nav_Screen(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profile_Nav_Screen)
      }
      
      func profile_Screen(_: Void = ()) -> MyProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profile_Screen)
      }
      
      func search_Nav_Screen(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: search_Nav_Screen)
      }
      
      func streams_Screen(_: Void = ()) -> UserListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: streams_Screen)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "fullProfileImageSlec") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fullProfileImageSlec' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "liveImageSlec") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'liveImageSlec' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eyepdf") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eyepdf' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fullProfileImage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fullProfileImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eye") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().search_Nav_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'search_Nav_Screen' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().navPager_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navPager_Screen' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().streams_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'streams_Screen' could not be loaded from storyboard 'Main' as 'UserListViewController'.") }
        if _R.storyboard.main().audience() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'audience' could not be loaded from storyboard 'Main' as 'AudienceViewController'.") }
        if _R.storyboard.main().profile_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profile_Screen' could not be loaded from storyboard 'Main' as 'MyProfileViewController'.") }
        if _R.storyboard.main().left_Nav_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'left_Nav_Screen' could not be loaded from storyboard 'Main' as 'LeftNavViewController'.") }
        if _R.storyboard.main().instagramPager_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'instagramPager_Screen' could not be loaded from storyboard 'Main' as 'WatchPagerViewController'.") }
        if _R.storyboard.main().broadcaster_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'broadcaster_Screen' could not be loaded from storyboard 'Main' as 'BroadcasterViewController'.") }
        if _R.storyboard.main().profile_Nav_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profile_Nav_Screen' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().home_Screen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'home_Screen' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}